<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="232689"><g><title>frost-snake-cli`csv::Trim::should_trim_fields (279 samples, 0.12%)</title><rect x="4.7024%" y="181" width="0.1199%" height="15" fill="rgb(227,0,7)" fg:x="10942" fg:w="279"/><text x="4.9524%" y="191.50"></text></g><g><title>frost-snake-cli`csv_core::reader::Reader::line (192 samples, 0.08%)</title><rect x="4.8223%" y="181" width="0.0825%" height="15" fill="rgb(217,0,24)" fg:x="11221" fg:w="192"/><text x="5.0723%" y="191.50"></text></g><g><title>frost-snake-cli`csv_core::reader::Reader::read_record (45,769 samples, 19.67%)</title><rect x="4.9048%" y="181" width="19.6696%" height="15" fill="rgb(221,193,54)" fg:x="11413" fg:w="45769"/><text x="5.1548%" y="191.50">frost-snake-cli`csv_core::reade..</text></g><g><title>frost-snake-cli`csv::reader::Reader&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;::read_byte_record&lt;std::io::buffered::bufreader::BufReader (59,016 samples, 25.36%)</title><rect x="2.6258%" y="197" width="25.3626%" height="15" fill="rgb(248,212,6)" fg:x="6110" fg:w="59016"/><text x="2.8758%" y="207.50">frost-snake-cli`csv::reader::Reader&lt;std:..</text></g><g><title>frost-snake-cli`std::io::buffered::bufreader::impl$4::fill_buf&lt;std::io::buffered::bufreader::BufReader (7,944 samples, 3.41%)</title><rect x="24.5744%" y="181" width="3.4140%" height="15" fill="rgb(208,68,35)" fg:x="57182" fg:w="7944"/><text x="24.8244%" y="191.50">fro..</text></g><g><title>frost-snake-cli`std::sys::windows::handle::Handle::read_buf (7,181 samples, 3.09%)</title><rect x="24.9023%" y="165" width="3.0861%" height="15" fill="rgb(232,128,0)" fg:x="57945" fg:w="7181"/><text x="25.1523%" y="175.50">fro..</text></g><g><title>KERNELBASE`ReadFile (7,135 samples, 3.07%)</title><rect x="24.9221%" y="149" width="3.0663%" height="15" fill="rgb(207,160,47)" fg:x="57991" fg:w="7135"/><text x="25.1721%" y="159.50">KER..</text></g><g><title>ntdll`NtReadFile (7,092 samples, 3.05%)</title><rect x="24.9406%" y="133" width="3.0478%" height="15" fill="rgb(228,23,34)" fg:x="58034" fg:w="7092"/><text x="25.1906%" y="143.50">ntd..</text></g><g><title>frost-snake-cli`core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState,ref$ (7,583 samples, 3.26%)</title><rect x="53.6454%" y="181" width="3.2589%" height="15" fill="rgb(218,30,26)" fg:x="124827" fg:w="7583"/><text x="53.8954%" y="191.50">fro..</text></g><g><title>frost-snake-cli`std::collections::hash::map::impl$85::write (1,085 samples, 0.47%)</title><rect x="56.4380%" y="165" width="0.4663%" height="15" fill="rgb(220,122,19)" fg:x="131325" fg:w="1085"/><text x="56.6880%" y="175.50"></text></g><g><title>VCRUNTIME140`memcpy (230 samples, 0.10%)</title><rect x="65.2205%" y="149" width="0.0988%" height="15" fill="rgb(250,228,42)" fg:x="151761" fg:w="230"/><text x="65.4705%" y="159.50"></text></g><g><title>frost-snake-cli`core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState,ref$ (2,925 samples, 1.26%)</title><rect x="65.3194%" y="149" width="1.2570%" height="15" fill="rgb(240,193,28)" fg:x="151991" fg:w="2925"/><text x="65.5694%" y="159.50"></text></g><g><title>frost-snake-cli`std::collections::hash::map::impl$85::write (818 samples, 0.35%)</title><rect x="66.2249%" y="133" width="0.3515%" height="15" fill="rgb(216,20,37)" fg:x="154098" fg:w="818"/><text x="66.4749%" y="143.50"></text></g><g><title>ntdll`RtlProtectHeap (49 samples, 0.02%)</title><rect x="66.6417%" y="101" width="0.0211%" height="15" fill="rgb(206,188,39)" fg:x="155068" fg:w="49"/><text x="66.8917%" y="111.50"></text></g><g><title>ntdll`RtlProtectHeap (27 samples, 0.01%)</title><rect x="66.6512%" y="85" width="0.0116%" height="15" fill="rgb(217,207,13)" fg:x="155090" fg:w="27"/><text x="66.9012%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (200 samples, 0.09%)</title><rect x="66.5773%" y="149" width="0.0860%" height="15" fill="rgb(231,73,38)" fg:x="154918" fg:w="200"/><text x="66.8273%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (197 samples, 0.08%)</title><rect x="66.5786%" y="133" width="0.0847%" height="15" fill="rgb(225,20,46)" fg:x="154921" fg:w="197"/><text x="66.8286%" y="143.50"></text></g><g><title>ntdll`RtlProtectHeap (53 samples, 0.02%)</title><rect x="66.6405%" y="117" width="0.0228%" height="15" fill="rgb(210,31,41)" fg:x="155065" fg:w="53"/><text x="66.8905%" y="127.50"></text></g><g><title>ntdll`RtlGetFullPathName_UstrEx (59 samples, 0.03%)</title><rect x="66.6701%" y="69" width="0.0254%" height="15" fill="rgb(221,200,47)" fg:x="155134" fg:w="59"/><text x="66.9201%" y="79.50"></text></g><g><title>ntdll`RtlGetFullPathName_UstrEx (58 samples, 0.02%)</title><rect x="66.6705%" y="53" width="0.0249%" height="15" fill="rgb(226,26,5)" fg:x="155135" fg:w="58"/><text x="66.9205%" y="63.50"></text></g><g><title>ntdll`RtlGetFullPathName_UstrEx (184 samples, 0.08%)</title><rect x="66.6667%" y="85" width="0.0791%" height="15" fill="rgb(249,33,26)" fg:x="155126" fg:w="184"/><text x="66.9167%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (117 samples, 0.05%)</title><rect x="66.6955%" y="69" width="0.0503%" height="15" fill="rgb(235,183,28)" fg:x="155193" fg:w="117"/><text x="66.9455%" y="79.50"></text></g><g><title>ntdll`TpWaitForWait (117 samples, 0.05%)</title><rect x="66.6955%" y="53" width="0.0503%" height="15" fill="rgb(221,5,38)" fg:x="155193" fg:w="117"/><text x="66.9455%" y="63.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (117 samples, 0.05%)</title><rect x="66.6955%" y="37" width="0.0503%" height="15" fill="rgb(247,18,42)" fg:x="155193" fg:w="117"/><text x="66.9455%" y="47.50"></text></g><g><title>ntdll`RtlGetFullPathName_UstrEx (333 samples, 0.14%)</title><rect x="66.6654%" y="101" width="0.1431%" height="15" fill="rgb(241,131,45)" fg:x="155123" fg:w="333"/><text x="66.9154%" y="111.50"></text></g><g><title>ntdll`TpWaitForWait (137 samples, 0.06%)</title><rect x="66.7496%" y="85" width="0.0589%" height="15" fill="rgb(249,31,29)" fg:x="155319" fg:w="137"/><text x="66.9996%" y="95.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (137 samples, 0.06%)</title><rect x="66.7496%" y="69" width="0.0589%" height="15" fill="rgb(225,111,53)" fg:x="155319" fg:w="137"/><text x="66.9996%" y="79.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (343 samples, 0.15%)</title><rect x="66.6637%" y="133" width="0.1474%" height="15" fill="rgb(238,160,17)" fg:x="155119" fg:w="343"/><text x="66.9137%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (342 samples, 0.15%)</title><rect x="66.6641%" y="117" width="0.1470%" height="15" fill="rgb(214,148,48)" fg:x="155120" fg:w="342"/><text x="66.9141%" y="127.50"></text></g><g><title>frost-snake-cli`frost_snake_lib::ledger::impl$1::execute (90,342 samples, 38.83%)</title><rect x="27.9884%" y="197" width="38.8252%" height="15" fill="rgb(232,36,49)" fg:x="65126" fg:w="90342"/><text x="28.2384%" y="207.50">frost-snake-cli`frost_snake_lib::ledger::impl$1::execute</text></g><g><title>frost-snake-cli`hashbrown::raw::RawTable&lt;tuple$&lt;u32,tuple$&lt;fixed::FixedU64&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt;,enum$&lt;frost_snake_lib::client::DepositState&gt; &gt; &gt;,alloc::alloc::Global&gt;::insert&lt;tuple$&lt;u32,tuple$&lt;fixed::FixedU64&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt;,enum$&lt;frost_snake_lib::client::DepositState&gt; &gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;u32,u32,tuple$&lt;fixed::FixedU64&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt;,enum$ (23,056 samples, 9.91%)</title><rect x="56.9051%" y="181" width="9.9085%" height="15" fill="rgb(209,103,24)" fg:x="132412" fg:w="23056"/><text x="57.1551%" y="191.50">frost-snake-cl..</text></g><g><title>frost-snake-cli`hashbrown::raw::RawTable&lt;tuple$&lt;u32,tuple$&lt;fixed::FixedU64&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt;,enum$&lt;frost_snake_lib::client::DepositState&gt; &gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;u32,tuple$&lt;fixed::FixedU64&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt;,enum$&lt;frost_snake_lib::client::DepositState&gt; &gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;u32,u32,tuple$&lt;fixed::FixedU64&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt;,enum$ (10,386 samples, 4.46%)</title><rect x="62.3502%" y="165" width="4.4635%" height="15" fill="rgb(229,88,8)" fg:x="145082" fg:w="10386"/><text x="62.6002%" y="175.50">frost..</text></g><g><title>ntdll`RtlFreeHeap (350 samples, 0.15%)</title><rect x="66.6632%" y="149" width="0.1504%" height="15" fill="rgb(213,181,19)" fg:x="155118" fg:w="350"/><text x="66.9132%" y="159.50"></text></g><g><title>frost-snake-cli`ascii::ascii_str::AsciiStr::trim (4,768 samples, 2.05%)</title><rect x="71.1314%" y="181" width="2.0491%" height="15" fill="rgb(254,191,54)" fg:x="165515" fg:w="4768"/><text x="71.3814%" y="191.50">f..</text></g><g><title>frost-snake-cli`ascii::ascii_str::impl$50::as_ascii_str (7,483 samples, 3.22%)</title><rect x="73.1805%" y="181" width="3.2159%" height="15" fill="rgb(241,83,37)" fg:x="170283" fg:w="7483"/><text x="73.4305%" y="191.50">fro..</text></g><g><title>frost-snake-cli`core::num::impl$27::from_str (3,480 samples, 1.50%)</title><rect x="76.3964%" y="181" width="1.4956%" height="15" fill="rgb(233,36,39)" fg:x="177766" fg:w="3480"/><text x="76.6464%" y="191.50"></text></g><g><title>frost-snake-cli`core::num::impl$28::from_str (6,692 samples, 2.88%)</title><rect x="77.8920%" y="181" width="2.8759%" height="15" fill="rgb(226,3,54)" fg:x="181246" fg:w="6692"/><text x="78.1420%" y="191.50">fr..</text></g><g><title>frost-snake-cli`fixed::from_str::get_frac64 (18,621 samples, 8.00%)</title><rect x="83.4767%" y="133" width="8.0025%" height="15" fill="rgb(245,192,40)" fg:x="194241" fg:w="18621"/><text x="83.7267%" y="143.50">frost-snake..</text></g><g><title>frost-snake-cli`compiler_builtins::int::udiv::__udivti3::__udivti3 (3,358 samples, 1.44%)</title><rect x="90.0361%" y="117" width="1.4431%" height="15" fill="rgb(238,167,29)" fg:x="209504" fg:w="3358"/><text x="90.2861%" y="127.50"></text></g><g><title>frost-snake-cli`fixed::from_str::get_int64 (1,378 samples, 0.59%)</title><rect x="91.4792%" y="133" width="0.5922%" height="15" fill="rgb(232,182,51)" fg:x="212862" fg:w="1378"/><text x="91.7292%" y="143.50"></text></g><g><title>frost-snake-cli`core::str::impl$0::parse&lt;fixed::FixedU64&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt (37,059 samples, 15.93%)</title><rect x="80.7679%" y="181" width="15.9264%" height="15" fill="rgb(231,60,39)" fg:x="187938" fg:w="37059"/><text x="81.0179%" y="191.50">frost-snake-cli`core::st..</text></g><g><title>frost-snake-cli`fixed::from_str::from_str_u64 (35,232 samples, 15.14%)</title><rect x="81.5531%" y="165" width="15.1412%" height="15" fill="rgb(208,69,12)" fg:x="189765" fg:w="35232"/><text x="81.8031%" y="175.50">frost-snake-cli`fixed::..</text></g><g><title>frost-snake-cli`fixed::from_str::get_int_frac64 (32,296 samples, 13.88%)</title><rect x="82.8148%" y="149" width="13.8795%" height="15" fill="rgb(235,93,37)" fg:x="192701" fg:w="32296"/><text x="83.0648%" y="159.50">frost-snake-cli`fixed..</text></g><g><title>frost-snake-cli`fixed::from_str::parse_bounds (10,757 samples, 4.62%)</title><rect x="92.0714%" y="133" width="4.6229%" height="15" fill="rgb(213,116,39)" fg:x="214240" fg:w="10757"/><text x="92.3214%" y="143.50">frost..</text></g><g><title>frost-snake-cli`core::str::impl$0::trim_matches (1,071 samples, 0.46%)</title><rect x="96.6943%" y="181" width="0.4603%" height="15" fill="rgb(222,207,29)" fg:x="224997" fg:w="1071"/><text x="96.9443%" y="191.50"></text></g><g><title>frost-snake-cli`csv::byte_record::ByteRecord::get (3,659 samples, 1.57%)</title><rect x="97.1546%" y="181" width="1.5725%" height="15" fill="rgb(206,96,30)" fg:x="226068" fg:w="3659"/><text x="97.4046%" y="191.50"></text></g><g><title>frost-snake-cli`frost_snake_lib::parser::parse_transaction (76,633 samples, 32.93%)</title><rect x="66.8149%" y="197" width="32.9337%" height="15" fill="rgb(218,138,4)" fg:x="155471" fg:w="76633"/><text x="67.0649%" y="207.50">frost-snake-cli`frost_snake_lib::parser::parse_transa..</text></g><g><title>frost-snake-cli`enum$&lt;core::option::Option&lt;slice$&lt;u8&gt; &gt;, 1, 18446744073709551615, Some&gt;::ok_or&lt;slice$&lt;u8&gt;,enum$ (2,377 samples, 1.02%)</title><rect x="98.7271%" y="181" width="1.0215%" height="15" fill="rgb(250,191,14)" fg:x="229727" fg:w="2377"/><text x="98.9771%" y="191.50"></text></g><g><title>frost-snake-cli`hashbrown::raw::impl$17::drop&lt;tuple$&lt;u16,tuple$&lt;frost_snake_lib::client::ClientAccount,std::collections::hash::map::HashMap&lt;u32,tuple$&lt;fixed::FixedU64&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt; &gt;,enum$ (570 samples, 0.24%)</title><rect x="99.7512%" y="197" width="0.2450%" height="15" fill="rgb(239,60,40)" fg:x="232110" fg:w="570"/><text x="100.0012%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (566 samples, 0.24%)</title><rect x="99.7529%" y="181" width="0.2432%" height="15" fill="rgb(206,27,48)" fg:x="232114" fg:w="566"/><text x="100.0029%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (565 samples, 0.24%)</title><rect x="99.7533%" y="165" width="0.2428%" height="15" fill="rgb(225,35,8)" fg:x="232115" fg:w="565"/><text x="100.0033%" y="175.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (564 samples, 0.24%)</title><rect x="99.7537%" y="149" width="0.2424%" height="15" fill="rgb(250,213,24)" fg:x="232116" fg:w="564"/><text x="100.0037%" y="159.50"></text></g><g><title>ntdll`TpWaitForWait (563 samples, 0.24%)</title><rect x="99.7542%" y="133" width="0.2420%" height="15" fill="rgb(247,123,22)" fg:x="232117" fg:w="563"/><text x="100.0042%" y="143.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (563 samples, 0.24%)</title><rect x="99.7542%" y="117" width="0.2420%" height="15" fill="rgb(231,138,38)" fg:x="232117" fg:w="563"/><text x="100.0042%" y="127.50"></text></g><g><title>frost-snake-cli`main (232,659 samples, 99.99%)</title><rect x="0.0095%" y="293" width="99.9871%" height="15" fill="rgb(231,145,46)" fg:x="22" fg:w="232659"/><text x="0.2595%" y="303.50">frost-snake-cli`main</text></g><g><title>frost-snake-cli`std::rt::lang_start_internal (232,659 samples, 99.99%)</title><rect x="0.0095%" y="277" width="99.9871%" height="15" fill="rgb(251,118,11)" fg:x="22" fg:w="232659"/><text x="0.2595%" y="287.50">frost-snake-cli`std::rt::lang_start_internal</text></g><g><title>frost-snake-cli`std::rt::lang_start::closure$0&lt;enum$&lt;core::result::Result&lt;tuple$ (232,659 samples, 99.99%)</title><rect x="0.0095%" y="261" width="99.9871%" height="15" fill="rgb(217,147,25)" fg:x="22" fg:w="232659"/><text x="0.2595%" y="271.50">frost-snake-cli`std::rt::lang_start::closure$0&lt;enum$&lt;core::result::Result&lt;tuple$</text></g><g><title>frost-snake-cli`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;enum$&lt;core::result::Result&lt;tuple$&lt;&gt;,eyre::Report&gt;, 1, 18446744073709551615, Err&gt; (*)(),enum$&lt;core::result::Result&lt;tuple$ (232,659 samples, 99.99%)</title><rect x="0.0095%" y="245" width="99.9871%" height="15" fill="rgb(247,81,37)" fg:x="22" fg:w="232659"/><text x="0.2595%" y="255.50">frost-snake-cli`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;enum$&lt;core::result::Result&lt;tuple$&lt;&gt;,eyre::Report&gt;, 1, 18446744073709551615, Err&gt; (*)(),enum$&lt;c..</text></g><g><title>frost-snake-cli`frost_snake_cli::main (232,659 samples, 99.99%)</title><rect x="0.0095%" y="229" width="99.9871%" height="15" fill="rgb(209,12,38)" fg:x="22" fg:w="232659"/><text x="0.2595%" y="239.50">frost-snake-cli`frost_snake_cli::main</text></g><g><title>frost-snake-cli`frost_snake_lib::execute&lt;std::io::buffered::bufreader::BufReader (232,659 samples, 99.99%)</title><rect x="0.0095%" y="213" width="99.9871%" height="15" fill="rgb(227,1,9)" fg:x="22" fg:w="232659"/><text x="0.2595%" y="223.50">frost-snake-cli`frost_snake_lib::execute&lt;std::io::buffered::bufreader::BufReader</text></g><g><title>frost-snake-cli`__scrt_common_main_seh (232,664 samples, 99.99%)</title><rect x="0.0095%" y="309" width="99.9893%" height="15" fill="rgb(248,47,43)" fg:x="22" fg:w="232664"/><text x="0.2595%" y="319.50">frost-snake-cli`__scrt_common_main_seh</text></g><g><title>all (232,689 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(221,10,30)" fg:x="0" fg:w="232689"/><text x="0.2500%" y="367.50"></text></g><g><title>ntdll`RtlUserThreadStart (232,673 samples, 99.99%)</title><rect x="0.0069%" y="341" width="99.9931%" height="15" fill="rgb(210,229,1)" fg:x="16" fg:w="232673"/><text x="0.2569%" y="351.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (232,667 samples, 99.99%)</title><rect x="0.0095%" y="325" width="99.9905%" height="15" fill="rgb(222,148,37)" fg:x="22" fg:w="232667"/><text x="0.2595%" y="335.50">KERNEL32`BaseThreadInitThunk</text></g></svg></svg>